name: Create Synapse Credential (curl-mini)

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        options: [dev, test, stage, prod, nonprd]
        default: nonprd

jobs:
  create-cred:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: PUT credential with curl (poll + verify)
        env:
          WS:   ${{ vars.SYNAPSE_WORKSPACE_NAME }}   # e.g. synapsewsdemo123
          CRED: ${{ vars.CREDENTIAL_NAME }}          # e.g. mpe-uai-cred1
          UAMI: ${{ vars.UAMI_RESOURCE_ID }}         # full UAMI resourceId
        run: |
          set -euo pipefail

          TOKEN=$(az account get-access-token --scope https://dev.azuresynapse.net/.default --query accessToken -o tsv)
          echo "::add-mask::$TOKEN"

          URI="https://${WS}.dev.azuresynapse.net/credentials/${CRED}?api-version=2020-12-01"
          BODY='{"properties":{"type":"ManagedIdentity","typeProperties":{"resourceId":"'"$UAMI"'"}}}'

          # PUT (capture headers + http code)
          HDRS=$(mktemp)
          CODE=$(curl -sS -w "%{http_code}" -D "$HDRS" -o /dev/null \
                  -X PUT "$URI" \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Content-Type: application/json" \
                  -H "If-Match: *" \
                  --data "$BODY")
          echo "PUT -> HTTP $CODE"

          # If async (202), poll the operationResults URL until it completes
          if [ "$CODE" = "202" ]; then
            LOC=$(awk '/^Location:/ {print $2}' "$HDRS" | tr -d '\r\n')
            RA=$(awk '/^Retry-After:/ {print $2}' "$HDRS" | tr -d '\r\n'); [ -z "$RA" ] && RA=8
            if [ -n "$LOC" ]; then
              echo "Polling $LOC every ${RA}s..."
              for i in {1..15}; do
                OP=$(curl -sS -o /dev/null -w '%{http_code}' -H "Authorization: Bearer $TOKEN" "$LOC")
                echo "operationResults -> HTTP $OP"
                [ "$OP" != "202" ] && break
                sleep "$RA"
              done
            fi
          fi

          # Handle eventual consistency: GET until 200
          for i in {1..12}; do
            GCODE=$(curl -sS -o /dev/null -w '%{http_code}' -H "Authorization: Bearer $TOKEN" "$URI")
            [ "$GCODE" = "200" ] && break
            sleep 5
          done

          echo "Final GET ($GCODE):"
          curl -sS -H "Authorization: Bearer $TOKEN" "$URI"
