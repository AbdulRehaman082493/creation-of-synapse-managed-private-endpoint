name: Deploy Synapse Managed Private Endpoints & Credentials

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment folder to deploy from"
        required: true
        type: choice
        options:
          - dev
          - test
          - stage
          - prod
          - nonprd
        default: nonprd

jobs:
  deploy-mpes:
    name: Deploy MPEs
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Display PowerShell version
        run: pwsh -Command '$PSVersionTable.PSVersion'

      - name: Install Az PowerShell module
        run: pwsh -Command 'Install-Module -Name Az -AllowClobber -Force -Scope CurrentUser'

      - name: Run PowerShell script to deploy MPEs
        run: |
          pwsh ./scripts/Deploy-MPEs.ps1 -EnvironmentFolder "${{ inputs.environment }}"
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          SYNAPSE_WORKSPACE_NAME: ${{ vars.SYNAPSE_WORKSPACE_NAME }}

  create-creds:
    name: Create Synapse Credentials
    needs: deploy-mpes
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure credentials from ./configs/credentials/${{ inputs.environment }}.json (skip if exists)
        env:
          WS:   ${{ vars.SYNAPSE_WORKSPACE_NAME }}   # e.g. synapsewsdemo123
          FILE: ./configs/credentials/${{ inputs.environment }}.json
        run: |
          set -euo pipefail
          test -f "$FILE" || { echo "Missing $FILE"; exit 1; }

          TOKEN=$(az account get-access-token --scope https://dev.azuresynapse.net/.default --query accessToken -o tsv)
          echo "::add-mask::$TOKEN"

          jq -c '.[]' "$FILE" | while read -r row; do
            NAME=$(echo "$row" | jq -r '.name')
            UAMI=$(echo "$row" | jq -r '.uami')
            [ -n "$NAME" ] && [ -n "$UAMI" ] || { echo "Bad entry: $row"; exit 1; }

            URI="https://${WS}.dev.azuresynapse.net/credentials/${NAME}?api-version=2020-12-01"

            # --- GET to check existence ---
            EXIST_CODE=$(curl -s -o /dev/null -w '%{http_code}' \
              -X GET \
              -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/json" \
              "$URI")
            echo "GET $NAME -> HTTP $EXIST_CODE"

            if [ "$EXIST_CODE" = "200" ]; then
              echo "✔ Credential $NAME already exists — skipping"
              continue
            elif [ "$EXIST_CODE" != "404" ]; then
              echo "Unexpected GET status for $NAME: $EXIST_CODE"
              exit 1
            fi

            # --- Not found: create with PUT ---
            BODY=$(jq -n --arg u "$UAMI" '{"properties":{"type":"ManagedIdentity","typeProperties":{"resourceId":$u}}}')

            echo "CREATE $NAME (PUT)"
            HDRS=$(mktemp)
            CODE=$(curl -sS -w "%{http_code}" -D "$HDRS" -o /dev/null \
                    -X PUT "$URI" \
                    -H "Authorization: Bearer $TOKEN" \
                    -H "Content-Type: application/json" \
                    -H "If-Match: *" \
                    --data "$BODY")
            echo "PUT -> HTTP $CODE"

            # If async, poll the Location until completion
            if [ "$CODE" = "202" ]; then
              LOC=$(awk '/^Location:/ {print $2}' "$HDRS" | tr -d '\r\n')
              RA=$(awk '/^Retry-After:/ {print $2}' "$HDRS" | tr -d '\r\n'); [ -z "$RA" ] && RA=8
              if [ -n "$LOC" ]; then
                echo "Polling $LOC every ${RA}s..."
                for i in {1..15}; do
                  OP=$(curl -s -o /dev/null -w '%{http_code}' -H "Authorization: Bearer $TOKEN" "$LOC")
                  echo "operationResults -> HTTP $OP"
                  [ "$OP" != "202" ] && break
                  sleep "$RA"
                done
              fi
            elif [ "$CODE" -ge 400 ]; then
              echo "Creation failed for $NAME (HTTP $CODE)"
              exit 1
            fi

            # Verify availability (eventual consistency)
            for i in {1..12}; do
              GCODE=$(curl -s -o /dev/null -w '%{http_code}' -H "Authorization: Bearer $TOKEN" "$URI")
              [ "$GCODE" = "200" ] && break
              sleep 5
            done
            [ "$GCODE" = "200" ] || { echo "Credential $NAME not available (last $GCODE)"; exit 1; }

            echo "✔ $NAME ready"
          done
